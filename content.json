[{"title":"","date":"2017-03-16T17:08:09.000Z","path":"2017/03/17/初探Fragment/","text":"初探FragmentFragment是什么 Fragmeng简介： 自从Android 3.0中引入fragments 的概念,根据词海的翻译可以译为:碎片、片段。其上的是为了解决不同屏幕分辩率的动态和灵活UI设计。大屏幕如平板小屏幕如手机，平板电脑的设计使得其有更多的空间来放更多的UI组件，而多出来的空间存放UI使其会产生更多的交互，从而诞生了fragments 。fragments 的设计不需要你来亲自管理view hierarchy 的复杂变化，通过将Activity 的布局分散到frament 中，可以在运行时修改activity 的外观，并且由activity 管理的back stack 中保存些变化。 Fragmeng优点： Fragment可以使你能够将activity分离成多个可重用的组件，每个都有它自己的生命周期和UI。 Fragment可以轻松得创建动态灵活的UI设计，可以适应于不同的屏幕尺寸。从手机到平板电脑。 Fragment是一个独立的模块,紧紧地与activity绑定在一起。可以运行中动态地移除、加入、交换等。 Fragment提供一个新的方式让你在不同的安卓设备上统一你的UI。 Fragment 解决Activity间的切换不流畅，轻量切换。 Fragment 替代TabActivity做导航，性能更好。 Fragment 在4.2.版本中新增嵌套fragmeng使用方法，能够生成更好的界面效果。 Fragment做局部内容更新更方便，原来为了到达这一点要把多个布局放到一个activity里面，现在可以用多Fragment来代替，只有在需要的时候才加载Fragment，提高性能 Fragmeng使用 两种添加方法 在activity的layout文件中显式的神明一个fragment 通过代码将fragment添加到一个已存在的ViewGroup，例如viewpager或者一个FrameLayout Fragmeng与Activity交互 Fragmeng通过getActivity()获得所在Activity上下文,需要注意的是getAcitivy()有可能为空 解决办法： 更”安全”的方法：(对于Fragment已经onDetach这种情况，我们应该避免在这之后再去调用宿主Activity对象，比如取消这些异步任务，但我们的团队可能会有粗心大意的情况，所以下面给出的这个方案会保证安全)在Fragment基类里设置一个Activity mActivity的全局变量，在onAttach(Activity activity)里赋值，使用mActivity代替getActivity()，保证Fragment即使在onDetach后，仍持有Activity的引用（有引起内存泄露的风险，但是异步任务没停止的情况下，本身就可能已内存泄漏，相比Crash，这种做法“安全”些），即： 123456789101112131415protected Activity mActivity;@Overridepublic void onAttach(Activity activity) &#123; super.onAttach(activity); this.mActivity = activity;&#125;/*** 如果你用了support 23的库，上面的方法会提示过时，有强迫症的小伙伴，可以用下面的方法代替*/@Overridepublic void onAttach(Context context) &#123; super.onAttach(context); this.mActivity = (Activity)context;&#125; Activity通过getFragmentManager()获得Fragmeng实例(findFragmentById,findFragmentByTag); 通过FragmentTransaction可以增加、移除或者代替Fragments； 通过fragmentTransaction.addToBackStack()可以把fragmeng保存到栈，响应后退按钮； Activity与fragment相互调用方法接口还可以通过Activity的onAttachFragment方法获得fragment的实例从而调用fragment的接口方法，而fragment可以通过onAttach获得父Acitivy的实例来调用相应的方法接口。如下： 1234567891011121314151617181920212223242526import android.app.Fragment;/** * @author:zhangqian * @time:2017/3/17 */public class TestActivity extends Activity &#123; private FragmentListener listener; @Override public void onAttachFragment(Fragment fragment) &#123; try &#123; if(fragment instanceof TestFragment)&#123; listener = (TestFragment)fragment; listener.todo(); &#125; &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; super.onAttachFragment(fragment); &#125;&#125; 123456789101112131415161718192021/** * @author:zhangqian * @time:2017/3/17 */public class TestFragment extends Fragment implements FragmentListener &#123; private MainActivity mActivity; @Override public void onAttach(Context context) &#123; super.onAttach(context); mActivity = (MainActivity) context; mActivity.getData(); &#125; @Override public void todo() &#123; &#125;&#125;","tags":[]},{"title":"Hello World","date":"2017-03-07T16:44:34.000Z","path":"2017/03/08/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]